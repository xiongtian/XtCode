动态代理有两种情况：
1、有接口的情况，使用JDK动态代理
原理：创建接口实现类代理对象，增强类的方法。需要使用Proxy类里面的方法创建代理对象
1) 调用newProxyInstance方法
方法的三个参数：
 第一个参数：类加载器
 第二个参数：增强方法所在的类的接口，支持多个接口
 第三个参数：实现里面的接口InvocationHandler，创建代理对象，写增强的方法。


2、没有接口情况，使用CGLIB动态代理
创建子类的代理对象，增强类的方法。


AOP术语：
1、连接点
类里面哪些方法可以被增强，哪些方法就是连接点
2、切入点
实际被真正增强的方法，称为切入点
3、通知（增强）
  1) 实际增强的逻辑部分称为通知（增强）
  2) 通知有多种类型：
  * 前置通知：
  * 后置通知：
  * 环绕通知：
  * 异常通知：
  * 最终通知：finally

4、切面
是动作，
  1)把通知应用到切入点的过程



AOP操作（准备）
1、Spring框架一般基于AspectJ实现AOP操作
  2)什么是AspectJ
  * AspectJ不是Spring组成部分，独立AOP框架，一般是将AspectJ和Spring框架一起使用，进行AOP操作。
2、基于AspectJ实现AOP操作
  1) 基于xml配置文件实现
  2) 基于注解方式实现（使用）
3、在项目工程中引入AOP相关的依赖
4、切入点的表达式
  1) 切入点表达式的作用：知道对哪个类里面的哪个方法进行增强
  2) 语法结构
  execution([权限修饰符] [返回类型] [类全路径] [方法名称] ([参数列表]))
  例子：
  *1：对com.atguigu.dao.BookDao类里面的add进行增强
  execution(* com.atguigu.dao.BookDao.add.(..))
  *2 对com.atguigu.dao.BookDao类里面的所有方法进行增强
  execution(* com.atguigu.dao.BookDao.*(..))
  *3 对com.atguigu.dao包里的所有类，类里面所有方法进行增强
  execution(* com.atguigu.dao.*.*(..))

注解方式：
1、常见类，在类里面定义方法
2、创建增强类（编写增强的逻辑）
  1) 在增强类里面，创建方法，让不同方法代表不同的通知类型
3、进行通知的配置
  1) 在spring配置文件中，开启注解扫描
  2) 使用注解创建User和UserProxy对象。
  3) 在增强类上面添加注解@Aspect
  4) 在spring配置文件中开启生成代理对象
细节问题：
1.对相同的切入点进行抽取
2.多个增强类对同一方法进行增强，设置增强类的优先级
  1) 在增强类上面添加注解@Order（数字类型值），数字类型值越小，优先级越高

XML方式：